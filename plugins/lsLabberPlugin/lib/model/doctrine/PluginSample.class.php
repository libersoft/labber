<?php

/**
 * Sample
 *
 * This abstract class Pluginhas been auto-generated by the Doctrine ORM Framework
 *
 * @package    phonline
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginSample extends BaseSample
{
  public function postInsert($event)
  {
    if (Doctrine::getTable('Order')->find($this->order_id)->rdp_id && $this->rdp_id == null)
    {
      $this->setRdpId(Doctrine::getTable('Order')->find($this->order_id)->rdp_id);
    }

    if (Doctrine::getTable('Order')->find($this->order_id)->bozza)
    {
      $this->setNumero('bozza campione-' . $this->id);
    }
    else
    {
      $this->sbozza();
    }

    $this->save();
  }

  public function completed()
  {
    // flag per controllare se tutti i controlli sono completati
    $completed = 0;
    // flag per controllare se tutti i controlli sono conformi
    $conforme = 0;
    // le Determination collegate a questo Sample
    $determinations = Doctrine::getTable('Determination')->findBy('sample_id', $this->id);
    foreach ($determinations as $determination)
    {
      if (is_null($determination->valore_inserito))
      {
        $completed = 1;
      }
      if ($determination->conforme == 0)
      {
        $conforme = 1;
      }
    }
    // se tutte le Determination sono state valorizzate, passa allo stato "Completato"
    if ($completed == 0)
    {
      $this->setStato(1);
    }
    // se tutte le Determination sono conformi lo Ã¨ anche il campione
    if ($conforme == 0)
    {
      $this->setConforme(1);
    }
    $this->save();    
  }

  public function getOrderedDeterminations()
  {
    return $this->getDeterminationsQuery()->orderBy('d.numriga')->execute();
  }

  public function sbozza()
  {
    if ($this->bozza)
    {
      $this->setBozza(false);
      $this->setNumero(SampleTable::nextInternalNumber(strtotime($this->Order->accepted_at)));
      $this->setStato(0);
      $this->save();
    }
  }

  /**
   * cascade: [delete] a mano
   *
   * @param type $event
   */
  public function preDelete($event)
  {
    foreach ($this->getDeterminationsQuery()->execute() as $determination)
    {
      $determination->delete();
    }
  }

  private function getDeterminationsQuery()
  {
    $query = Doctrine::getTable('Determination')
      ->createQuery('d')
      ->where('d.sample_id = ?', $this->id);

    return $query;
  }

  /**
   * Ritorna le OfferSection collegate per la determinazione del
   * prezzo.
   *
   * @return Array gli id delle OfferSection sorgenti
   */
  public function getSectionSources()
  {
    $ids = array();

    foreach ($this->getDeterminationsQuery()->execute() as $determination)
    {
      $source = json_decode($determination->source);

      if ($source->table == 'OfferSection' && !in_array($source->id, $ids))
      {
        $ids[] = (int) $source->id;
      }
    }

    return Doctrine::getTable('OfferSectionSource')
      ->createQuery('s')
      ->whereIn('s.offer_section_id', $ids)
      ->execute();
  }

  public function preUpdate($event)
  {
    foreach ($this->getModified() as $k => $v)
    {
      switch ($k)
      {
        case 'unlocked':
          if ($v)
          {
            foreach ($this->getSectionSources() as $oss)
            {
              $ss = new SampleSource();
              $ss->set('sample_id', $this->id);

              if ($oss->isPacket())
              {
                $ss->set('packet_id', $oss->packet_id);
              }
              else
              {
                $determination = Doctrine::getTable('Determination')
                  ->createQuery('d')
                  ->where('d.sample_id = ?', $this->id)
                  ->andWhere('d.denomination_id = ?', $oss->Determination->denomination_id)
                  ->andWhere('d.method_id = ?', $oss->Determination->method_id)
                  ->andWhere('d.params = ?', $oss->Determination->params)
                  ->fetchOne();
                $ss->set('determination_id', $determination->id);
              }

              $ss->set('price', $oss->price);
              $ss->save();
            }

            $this->updateHistory('Sbloccato', $v);
          }
          break;
      }
    }
  }

  public function getPriceSources()
  {
    if ($this->unlocked)
    {
      return $this->getSources();
    }
    else
    {
      return $this->getSectionSources();
    }
  }

  public function updateHistory($action, $value)
  {
    $history = json_decode($this->storico);
    $history[] = array(
      'user' => sfContext::getInstance()->getUser()->getGuardUser()->username,
      'action' => $action,
      'value' => $value,
      'timestamp' => time(),
    );
    $this->setStorico(json_encode($history));
  }
}
